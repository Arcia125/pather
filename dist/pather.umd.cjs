(function(n,s){typeof exports=="object"&&typeof module<"u"?s(exports):typeof define=="function"&&define.amd?define(["exports"],s):(n=typeof globalThis<"u"?globalThis:n||self,s(n.pather={}))})(this,function(n){"use strict";var g=Object.defineProperty;var N=(n,s,a)=>s in n?g(n,s,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[s]=a;var r=(n,s,a)=>(N(n,typeof s!="symbol"?s+"":s,a),a);class s{constructor(t=null,e){r(this,"g",0);r(this,"h",0);r(this,"equals",t=>s.equals(this,t));this.parent=t,this.position=e}static equals(t,e){var i,h,c,l;return!t.position||!e.position?!1:((i=t.position)==null?void 0:i.x)===((h=e.position)==null?void 0:h.x)&&((c=t.position)==null?void 0:c.y)===((l=e.position)==null?void 0:l.y)}get f(){return this.g+this.h}}const a=o=>{const t=[];let e=o;for(;e.parent;)t.push(e),e=e.parent;return t},p=(o,t=!1)=>{const e=o.position.x,i=o.position.y;let h=[{x:0,y:-1},{x:0,y:1},{x:-1,y:0},{x:1,y:0}];return t&&(h=h.concat([{x:-1,y:-1},{x:1,y:-1},{x:-1,y:1},{x:1,y:1}])),h.map(c=>new s(o,{x:e+c.x,y:i+c.y}))},u={DEFAULT:(o,t)=>Math.abs(o.position.x-t.position.x)+Math.abs(o.position.y-t.position.y)},f={DEFAULT:(o,t)=>o.equals(t)},d=99999;class x{constructor(t){r(this,"possibleNodes",[]);r(this,"checkedNodes",[]);r(this,"start");r(this,"end");r(this,"config");r(this,"findPath",()=>{for(;this.possibleNodes.length;){const t=this.checkNode();if(t!=null&&t.path)return t.path}});r(this,"checkNode",()=>{this.possibleNodes.sort((i,h)=>h.f-i.f);const t=this.possibleNodes.pop();if(!t)return;if(this.checkedNodes.push(t),this.config.isDone(t,this.end))return{path:a(t).reverse()};const e=p(t,this.config.diagonal);for(let i of e)this.config.wouldCollide(i)||this.possibleNodes.filter(h=>h.equals(i)).length>0||this.checkedNodes.filter(h=>h.equals(i)).length>0||(i.g=t.g+1,i.h=this.config.heuristic(i,this.end),this.possibleNodes.push(i))});this.config={...t,heuristic:t.heuristic||u.DEFAULT,diagonal:t.diagonal||!1,maxIterations:t.maxIterations||d,isDone:t.isDone||f.DEFAULT},this.start=new s(null,t.startPos),this.end=new s(null,t.endPos),this.possibleNodes.push(this.start)}}const y=(...o)=>new x(...o).findPath();n.findPath=y,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
